#!/usr/bin/perl
#---------------------------------------------------------------------
#  $Id: module.glomule.4,v 1.3 2000/07/12 04:52:28 eric Exp $
#
#  eThreads - revolutionizing forums... again.
#  Copyright (C) 1999 Eric Richardson
#
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License
#     as published by the Free Software Foundation; either version 2
#     of the License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#     02111-1307, USA.
#
#     For information, contact eThreads:
#         ethreads@ethreads.com
#         http://ethreads.com
#
#  This is a forum_type module.  It contains code for displaying 
#  forums of its type.
#
#  forum type:  Calendar
#     This module displays data in calendar form.
#
#---------------------------------------------------------------------

package eThreads::glomule::4;

use strict;
use Time::ParseDate;
use eThreads::core;
use eThreads::viewer;
use vars qw($core $viewer %e $m_db $db %input %posts %post);

#----------

sub init {
	my $class = shift;
	my %args = @_;
	$core = eThreads::core->substart;
	$viewer = eThreads::viewer->substart;
	bless ( { %args }, $class );
}

#----------

sub settings{ my %s = (
	type 	=> 'calendar',
	author	=> 'e@ethreads.com',

	options	=> {
		d_sort_field	=> "timestamp",
		find_new_posts	=> 0,
	},
);}

#----------

sub fields_schema { my %s = (
	id				=> {
		def			=> "int(11) DEFAULT '0' NOT NULL auto_increment",
		d_value		=> "#{id}",
		p_key		=> 1,
	},
	title			=> {
		def			=> "varchar(150) DEFAULT '' NOT NULL",
		notnull		=> 1,
	},
	poster			=> {
		def			=> "text",
		auth_value	=> $e{user}{name},
	},
	poster_email	=> {
		def			=> "text",
		auth_value	=> $e{user}{email},
	},
	timestamp		=> {
		def			=> "int(11)",
		type		=> "datetime",
		auth_value	=> parsedate("$input{mon}/$input{day}/$input{year} $input{hour}:$input{min}"),
	},
	child_of		=> {
		def			=> "int(11)",
		d_value		=> $input{reply_to},
	},
	body			=> {
		def					=> "text",
		allow_html			=> 1,
		convert_newlines	=> 1,
	},
	status			=> {
		def			=> "tinyint(3) unsigned",
		d_value 	=> "#{status}",
	},
	username		=> {
		def			=> "varchar(30)",
		auth_value	=> $e{user}{username},
	},
	children		=> {
		def			=> "int(11)",
	},
); return %s;}

#----------

# fields used in $core->get_posts()
sub fields_get_posts {my @f = (
	'id','title','poster','poster_email','timestamp','child_of','status','length(body)'
);return @f;}

# fields used in $core->get_post()
sub fields_get_post {my @f = (
	'title','poster','poster_email','username','timestamp','body','child_of'
);return @f;}

#----------

sub prefs { my %p = (
	datetime_format     => {    
		d_val       => "%D %I:%M%p",
		descript    => qq(      
			How eThreads should format fields marked as containing date & time.
		),
	},
	time_format     => {    
		d_val       => "%I:%M%p",
		descript    => qq(      
			How eThreads should format fields marked as containing only a time.
		),
	},
	show_empty		=> {
		d_val		=> "0",
		descript	=> qq(
			Should eThreads display a thread row for days containing no events.
		),
	},
);}

#----------

sub data_tbls {
	my $class = shift;

	my %tbls = (
		$class->{main_tbl}	=> {
			$class->fields_schema
		},
	);
}

#----------

sub preset_data {
	my $class = shift;

	$class->{main_tbl} = "glomdata_".$class->{name};
	$class->{main_tbl} =~ s!/!WOOP!g;

	my %g = (
		fields		=> ['intro','main_tbl'],
		intro		=> {
			visible	=> 0,
		},
		main_tbl	=> {
			visible	=> 0,
			d_value	=> $class->{main_tbl},
		},
	);

	return %g;
}

#----------

sub theme_fields { return (
	'header','footer','day_table_top','day_table_day','day_table_event',
	'day_table_bottom','post_html','c_post_html','search_box',
	'search_results_top','search_results_html','search_results_bottom'
);};

#------------------------#
# forum_type subroutines #
#------------------------#

sub startup {
	# this subroutine must be present in all forum_type modules.  It 
	# is called when the forum_type is loaded.  If you have anything 
	# you want to do at startup, do it here

	if ($e{script} eq"$e{settings}{scripts}{view}") {
		# unlike normal forums, we only want viewers viewing
		$e{functions}{post}{view} = 0;
	} elsif ($e{script} eq"$e{settings}{scripts}{members}") {
		$e{functions}{post}{members} = 0;
	} elsif ($e{script} eq"$e{settings}{scripts}{admin}") {
		$core->auth::require("moderate");
	}
}

#----------

sub disable_buttons {
	if ($e{script} eq $e{settings}{scripts}{admin} && $e{user}{rights}{moderate}) {
		return ('reply');
	} elsif ($e{script} eq $e{settings}{scripts}{members}) {
		return ('post','reply');
	} else {
		return ('post','options','reply');
	}
}

#----------

sub eThreads::viewer::print_threads {
    require Time::DaysInMonth;
    my $days = Time::DaysInMonth::days_in($e{time}{year},$e{time}{mon});
    my $day = "1";
    while ($day <= $days) {
        $day = "0".$day if ($day < 10 && $day !~ /0/);
        my @sorted_ids =
            map { $_->[0] }
            sort { $a->[1] <=> $b->[1] }
            map { [ $_, $posts{0}{$_}{timestamp} ] }
            (keys %{$posts{$day}});
       eThreads::viewer::print_thread($day,@sorted_ids) if ($e{prefs}{show_empty} || @sorted_ids);
        $day++;
    }
}

#----------

sub eThreads::viewer::thread_table_top {
    $_ = $e{look}{day_table_top};
        s/#{mon}/$e{time}{mon}/gi;
        s/#{year}/$e{time}{year}/gi;
    print;
}

#----------

sub eThreads::viewer::thread_table_bottom {
        my ($p_month,$n_month,$p_end,$n_end);
        # figure out what last month was
        my $p_mon;
        my $p_year;
        if ($e{time}{mon} == 1) {
                $p_mon = 12;
                $p_year = ($e{time}{year} - 1);
        } else {
                $p_mon = ($e{time}{mon} - 1);
                $p_year = $e{time}{year};
        }
        $p_month = "$e{forum}{path}/$e{script}/$input{forum}/?mon=$p_mon&year=$p_year";
        # now let's do next month
        my $n_mon;
        my $n_year;
        if ($e{time}{mon} == 12) {
                $n_mon = 1;
                $n_year = ($e{time}{year} + 1);
        } else {
                $n_mon = ($e{time}{mon} + 1);
                $n_year = $e{time}{year};
        }
        $n_month = "$e{forum}{path}/$e{script}/$input{forum}/?mon=$n_mon&year=$n_year";
        $_ = $e{look}{day_table_bottom};
                s/#P_MONTH/$p_month/g;
                s/#N_MONTH/$n_month/g;
                s/#P_END/$p_end/g;
                s/#N_END/$n_end/g;
        print;
}


#----------

sub eThreads::viewer::print_thread {
    my $day = shift;
    $e{status}{thread_count}++;
    my ($color,$f_color);
    my $even = $e{status}{thread_count}%2;
    if ($even) {
        $color = $e{tweak}{threadsEVEN_ROW_COLOR};
        $f_color = $e{tweak}{threadsEVEN_FONT_COLOR};
    } else {
        $color = $e{tweak}{threadsODD_ROW_COLOR};
        $f_color = $e{tweak}{threadsODD_FONT_COLOR};
    }
    my $events;
    # note that we're shifting off the subroutine input here, not a defined array
    while (my $id = shift) {
        my $time = $core->timestamp_to_date($posts{0}{$id}{timestamp},$e{prefs}{time_format});

		if ($time eq"12:00AM") {
			$time = "&nbsp;"x15;
		}

        my ($link,$link_end);
        if ($posts{0}{$id}{'length(body)'}) {
            $link = qq(<a href="$e{forum}{path}/$e{script}/$input{forum}/view_post?id=$id">);
            $link_end = "</a>";
        }
		
		my $event = $e{look}{day_table_event};
			$event =~ s!#{timestamp}!$time!gi;
			$event =~ s!#{title}!$posts{0}{$id}{title}!gi;
			$event =~ s!#{link}!$link!gi;
			$event =~ s!#{/link}!$link_end!gi;
        $events .= $event;
    }
    $events = "&nbsp;" unless $events;
    $_ = $e{look}{day_table_day};
        s/#BG_COLOR/#$color/g;
        s/#{day}/$day/gi;
        s/#F_COLOR/#$f_color/g;
        s/#{events}/$events/g;
    print;
}


#----------

sub eThreads::core::get_posts {
	require Time::ParseDate;
	%{$e{time}} = &get_current_date;
	$e{time}{mon}   = $input{mon}   if ($input{mon});
	$e{time}{year}  = $input{year}  if ($input{year});
	my $start   = Time::ParseDate::parsedate("$e{time}{mon}/01/$e{time}{year}");
	my $end     = Time::ParseDate::parsedate("1 months", NOW => $start);

	my $get_events = $db->prepare("
		select $e{fields}{t_get_posts} from $e{forum}{main_tbl} 
		where timestamp > $start and timestamp < $end
	");

	$core->bail(0,$db->errstr) unless ($get_events->execute);

	while (my @result = $get_events->fetchrow_array) {
		my %tmp;
		my @fields = @{$e{fields}{get_posts}};

		while (my $field = shift(@fields)) {
			$tmp{$field} = shift(@result);
		}

		%{$posts{0}{$tmp{id}}} = %tmp;


		# we'll go ahead and save ourself some work later by day of month sorting here.
		my @date = localtime($tmp{timestamp});
		my $day = ($date[3] < 10) ? '0'.$date[3] : $date[3];
		$posts{$day}{$tmp{id}} = 1;
	}
}

#----------

sub get_current_date {
    my %time;
    (
        $time{sec},$time{min},$time{hour},$time{day},$time{mon},$time{year},
        $time{wday},$time{yday},$time{isdst}
    ) = localtime;
    $time{mon}++;
	$time{year} += 1900;
    return %time;
}

#----------

#-------------#
# Change Logs #
#-------------#

# $Log: module.glomule.4,v $
# Revision 1.3  2000/07/12 04:52:28  eric
# * fixed bug in glomule preset_data code
#
# Revision 1.2  2000/07/11 18:53:26  eric
# * ummm...  i did stuff...  good stuff, i think.
#   (WTF do you expect?!?!?  It's a 1000+ line diff)
#
# Revision 1.1  2000/04/29 16:53:37  eric
# * added files created during eThreads1_2-devel to main tree
#
# Revision 1.1.2.3  2000/04/22 20:31:06  eric
# * work on the domain rooting code
# * added the glomule::disable_buttons sub to the rest of the glom types
# * added a '</form>' whose absense was dorking up picky CSS
#
# Revision 1.1.2.2  2000/03/11 18:51:17  eric
# * misc. tweaks in the road towards 1.2-stable
#
# Revision 1.1.2.1  2000/03/06 21:57:20  eric
# * created glomule registry
# * coined "glomule" term to refer to data holders (formerly we used
#   "forum", but that's too specific).  Glomule comes from the word
#   agglomeration, meaning "a confused or disordered mass".
#
# Revision 1.1.2.4  2000/02/25 16:40:02  eric
# * fixed some look changing features to correlate with new recursive
#   caching
#
# Revision 1.1.2.3  2000/02/21 19:09:02  eric
# * updated user information to use new user tbl structure
#
# Revision 1.1.2.2  2000/01/18 23:40:48  eric
# * rewrote calendar forum_type module to work with new structure
#

#--------------
1;
