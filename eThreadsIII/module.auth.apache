#!/usr/bin/perl
#---------------------------------------------------------------------
#  $Id: module.auth.apache,v 1.8 2000/07/10 20:54:21 eric Exp $
#
#  eThreads - revolutionizing forums... again.
#  Copyright (C) 1999 Eric Richardson
#
#       This program is free software; you can redistribute it and/or
#       modify it under the terms of the GNU General Public License
#       as published by the Free Software Foundation; either version 2
#       of the License, or (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#       02111-1307, USA.
#
#       For information, contact eThreads:
#           ethreads@ethreads.com
#           http://ethreads.com
#
#  This module authenticates users for eThreads using a .htaccess 
#  file
#
#---------------------------------------------------------------------

sub auth::get_rights {
	my $class = shift;
	my %args = (@_,);

	# build a forum tree for this forum
	my @tree = $class->build_forum_tree($args{forum});

	# append '0' (the old .MOAF) to the tree
	unshift @tree, '0';

	my %rights = $class->g_load_tbl(
		tbl			=> $e{settings}{db}{tbls}{rights},
		ident		=> 'forum',
		extra		=> "and user=$args{user}",
		ids			=> \@tree,
	);

	my %u_rights;
	while (defined(my $id = shift @tree)) {
		foreach my $right (keys %{$rights{$id}}) {
			$u_rights{$right} = $rights{$id}{$right} unless (
				defined($u_rights{$right})
			);
		}
	}

	return %u_rights;
}

#----------

sub auth::require {
	my ($class,@required) = @_;
	my $they_scored;
	
	for my $req (@required) { 
		$they_scored = 1 if ($e{user}{rights}{$req});
	}

	if ($they_scored) {
		# let 'em pass
	} else {
		&header("","Authorization DENIED!!!!") unless ($e{status}{header});
		print <<EOP;
		You do not have the proper permissions to access this area.  Please 
		contact your administrator if you feel you are getting this notice 
		in error.
EOP
		&footer unless ($e{status}{footer});
		die "\n"; #quick and painless...  all deaths should be this way.
	}
}

#----------

sub auth::get_info {
	# since they made it through the .htaccess file, we assume 
	# they have permission to be here.
	my ($class,$username,$forum) = @_;

	my $get_user_info = $m_db->prepare("
		select id,name,email,signature 
		from $e{settings}{db}{tbls}{users} where username=?
	");

	&bail("",0,$m_db->errstr) unless (
		$get_user_info->execute($username)
	);

	(	$e{user}{id},$e{user}{name},
		$e{user}{email},$e{user}{signature}
	) = $get_user_info->fetchrow_array;

	$get_user_info->finish;

	# now we load up any custom prefs they may have for this forum

	my @ids = ($forum);
	my %u_prefs = &g_load_tbl('',
		tbl     => $e{settings}{db}{tbls}{prefs},
		ident   => 'forum',
		ids     => \@ids,
		extra   => "and user = '$e{user}{id}'"
	);

	foreach my $pref (keys %{$u_prefs{$forum}}) {
		$e{u_prefs}{$pref} = $u_prefs{$forum}{$pref};
	}

	$e{user}{username} = $username;
}

#----------

sub auth::login {
	# REMEMBER : this function is called WITHOUT printing a Content-type.
	# if you want to print something here, you must print your own type.

	print "Location: $e{forum}{path}/$e{settings}{scripts}{members}/$input{forum}\n\n";
}

#----------

sub auth::signup {
	my ($class,$user,$pass,$name,$email) = @_;

	$core->bail(0,$m_db->errstr) unless ($m_db->do("
		insert into $e{settings}{db}{tbls}{users}(username,password,name,email)
		values('$user','$pass','$name','$email')
	"));
}

#-------------#
# Change Logs #
#-------------#

# $Log: module.auth.apache,v $
# Revision 1.8  2000/07/10 20:54:21  eric
# * merged BCI and tgp devel trees
# * cleaned up some code in forum_info and cache
#
# Revision 1.7  2000/06/01 00:32:04  eric
# * monster commit
# * initial glomlet support
# * started hacking presets into something more flexible
# * started hacking glomule class and inheritance support directly into
#   look themes
#
# Revision 1.6  2000/05/11 00:54:54  eric
# * committing Gospelcom patches
#
# Revision 1.5  2000/04/29 16:39:19  eric
# * merging eThreads1_2-devel tree back into main eThreads tree
#
# Revision 1.4.4.4.4.5  2000/03/03 00:54:25  eric
# * updated rights code
#
# Revision 1.4.4.4.4.4  2000/02/24 15:53:02  eric
# * fixed rights loading
#
# Revision 1.4.4.4.4.3  2000/02/24 15:26:31  eric
# * fixed some rights loading
# * fixed user pref caching
#
# Revision 1.4.4.4.4.2  2000/02/23 06:51:25  eric
# * ummm...  i did stuff.  lots of stuff.
#
# Revision 1.4.4.4.4.1  2000/02/21 19:09:02  eric
# * updated user information to use new user tbl structure
#
# Revision 1.4.4.4  1999/09/03 12:25:03  eric
# * rolled $u_db into $m_db
#
# Revision 1.4.4.3  1999/08/26 14:04:25  eric
# * updated all headers to conform to standard eThreads header
#
# Revision 1.4.4.2  1999/08/18 07:03:36  eric
# * moved signup code from view to auth module
# * added auth module for mod_auth
#
# Revision 1.4.4.1  1999/06/22 14:37:34  eric
# * added support for password protected forums
#
# Revision 1.4  1999/04/29 23:52:55  eric
# * added class field to get_rights so it can be called outside of core
# * removed some old warnings
#
# Revision 1.3  1999/04/29 22:47:49  eric
# * lots of fixes in auth code
#
# Revision 1.2  1999/04/13 23:14:12  eric
# * auth::get_rights code functional
# * added auth::require for making sure proper rights are present
#
# Revision 1.1  1999/03/22 00:44:43  eric
# * first revision of Apache authentication module
#

#---------------#
# End of Script #
#---------------#

1;
