#!/usr/bin/perl
#########################################################
#	$Id: users,v 1.5 1998/06/13 17:26:30 eric Exp $
#
#	eThreads - Threaded forum software for the web
#	Copyright (C) 1998 Eric Richardson
#
#       This program is free software; you can redistribute it and/or
#       modify it under the terms of the GNU General Public License
#       as published by the Free Software Foundation; either version 2
#       of the License, or (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#       For information on eThreads, contact Eric Richardson at
#       eric@gospelcom.net , or check out the web site at
#       http://www.ericrichardson.com/e-threads/
#
#	This script contains code to allow the administrator to add, 
#	remove, or modify users.  From this script the administrator 
#	can also change admin permissions for other users.
#
#	$Log: users,v $
#	Revision 1.5  1998/06/13 17:26:30  eric
#	Moved db calls to module.  Changed db handles for eThreads standards
#	compliance.
#
#	Revision 1.4  1998/06/12 23:23:11  eric
#	Moved configuration variables to config.
#
#	Revision 1.3  1998/05/10 18:35:42  eric
#	All functions I've thought of are now implemented.  Now it just needs to
#	be debugged.
#
#	Revision 1.2  1998/05/09 18:48:47  eric
#	Added main menu.
#	Coded list_all_users.
#	Coded delete_user_warn.
#
#	Revision 1.1  1998/05/09 18:08:29  eric
#	Initial check-in for users
#
#
#########################################################

print "Content-type: text/html\n\n";

use DBI;

BEGIN {
	require "config";
}

###########################
###########################

# Establish the connection to the database with user info
$dbh = DBI->connect("DBI:$db_type:$db_main:$db_host",eric, whatever);
die "users: DB Connection to $db_type:$db_main:$db_host Failed!\n" unless ($dbh);

# Get input variables
&get_vars;

&main_menu unless ($syntax);
&search_for_user if ($syntax == 5);
&add_user if ($syntax == 10);
&modify_user_values if ($syntax == 20);
&modify_user if ($syntax == 21);
&delete_user_warn if ($syntax == 30);
&delete_user if ($syntax == 31);

###########################
# - - - Subroutines - - - #
###########################

sub main_menu {
	$title = "main menu";
	&html_header;

	print <<EOP;
	This is the user maintenance interface for eThreads on this server.  You 
	can use this script to add, delete, or modify user accounts.  Please note 
	that changes made with this script affect the user on all forums hosted by 
	this site.
	<p><hr><p>
	<b>Modify or Delete a User:</b>
	<br>
	<form action="$path/users" method=GET>
	<input type=hidden name=syntax value=5>
	Search for <select name="option">
	<option value="username">username
	<option value="fullname">name
	<option value="email">email address
	</select>: <input type=text name="search_for" size=30>
	<input type=submit name=submit value="Search">
	</form>
	<b><a href="$path/users?syntax=5&option=all">List all users</a></b>
	<p><hr><p>
	<b>Add a user:</b>
	<form action="$path/users" method=post>
	<input type=hidden name=syntax value=10>
	<table border=0>
	<tr><td>Username:</td><td><input type=text name="username" size=30></td></tr>
	<tr><td>Full Name:</td><td><input type=text name="fullname" size=30></td></tr>
	<tr><td>Email Address:</td><td><input type=text name="email" size=30></td></tr>
	<tr><td>Password:</td><td><input type=password name="password" size=30></td></tr>
	<tr><td>AdminL</td><td><input type=text name="admin" size=30></td></tr>
	</table><input type=submit name=submit value="Add User"></form>
EOP

	&html_footer;
}

##########
##########

sub search_for_user {
	$title = "search for user";
	&html_header;

	$search_for_user = $dbh->prepare("select username, fullname, email from users where username clike '%$search_for%' order by username") if ($option eq"username");
	$search_for_user = $dbh->prepare("select username, fullname, email from users where fullname clike '%$search_for%' order by username") if ($option eq"fullname");
	$search_for_user = $dbh->prepare("select username, fullname, email from users where email clike '%$search_for%' order by username") if ($option eq"email");
	$search_for_user = $dbh->prepare("select username, fullname, email from users order by username") if ($option eq"all");

	unless ($search_for_user->execute) {
		&log_error;
	}
	else {
		print <<EOP;
		<table border=0> 
		<tr><td width=100><b>Options:</td>
		<td width=100><b>Username:</b></td>
		<td width=130><b>Full Name:</b></td>
		<td width=100><b>Email Address:</b></td></tr>
EOP
		while (($username,$fullname,$email) = $search_for_user->fetchrow_array) {
			print <<EOP;   
			<tr><td>       
			<a href="$path/users?syntax=20&username=$username">Modify</a> - 
			<a href="$path/users?syntax=30&username=$username">Delete</a>
			</td><td>$username</td><td>$fullname</td><td>$email</td></tr>
EOP
		}         
		print "</table>";
	}
	&html_footer;
}

##########
##########

sub add_user {
	$title = "add user";
	&html_header;
	# First we check to make sure no one already has that username
	$check_for_username = $dbh->prepare("select username from users where username='$username'");
	&log_error unless ($check_for_username->execute);
	($existing_username) = $check_for_username->fetchrow_array;
	
	print qq(
	Sorry, that username is taken.  Please go back and try again.
	) if ($existing_username);

	unless ($existing_username) {

		# If they didn't enter a password, it would be useless to go on.
		print qq(
		You must enter a password for this account.  Please go back and try again.
		) unless ($password);

		if ($password) {
			# Encrypt the password
			$password = crypt(k9,$password);

			# We have to make them part of the admin group if they're an admin
			$group = "admin" if ($admin);

			# Now we can insert the new username
			&log_error unless ($create_user = $dbh->do("insert into users(username,password,fullname,email,admin,group) values('$username','$password','$fullname','$email','$admin','$group')"));
			print qq(
			User $username added successfully, 
			<a href="$path/users">Return to Main Menu</a>
			) if ($create_user);
		}
	}

	&html_footer;
}

##########
##########

sub modify_user_values {
	$title = "modify user information";
	&html_header;

	$get_current_values = $dbh->prepare("select fullname, email, admin from users where username='$username'");
	unless ($get_current_values->execute) {
		&log_error;
	}
	else {
		$admin_for = $admin;
		$admin_for = "none" unless ($admin_for);
		($fullname,$email,$admin) = $get_current_values->fetchrow_array;
		print <<EOP;
		<b>Modify values for $username:</b>
		<p><i>Current Values:</i>
		<br>username: $username
		<br>password: <i>Encrypted</i>
		<br>Full Name: $fullname
		<br>Email: $email
		<br>Admin: $admin_for
		<p><i>New Values:</i>
		<form action="$path/users" method=post>
		<input type=hidden name="syntax" value="21">
		<input type=hidden name="username_orig" value="$username">
		<table width=190>
		<tr><td width=70>username: </td><td width=120><input type=text name=username size=30 value="$username"></td></tr>
		<tr><td>password: </td><td><input type=password name="password" size=30></td></tr>
		<tr><td></td><td><b>To leave the current password, do not enter anything in the password field.</b></td></tr>
		<tr><td>Full Name: </td><td><input type=text name="fullname" size=30 value="$fullname"></td></tr>
		<tr><td>Email: </td><td><input type=text name="email" size=30 value="$email"></td></tr>
		<tr><td>Admin: </td><td><input type=text name="admin" size=30 value="$admin"></td></tr>
		<tr><td>Submit: </td><td><input type=submit name=submit value="Change User Information"></td></tr>
		</table>
		</form>
EOP
	}

	&html_footer;
}

##########
##########

sub modify_user {
	$title = "modify user information";
	&html_header;
	
	$get_existing_info = $dbh->prepare("select password, admin, email, fullname from users where username='$username_orig'");
	&log_error unless ($get_existing_info->execute);
	($epassword,$eadmin,$eemail,$efullname) = $get_existing_info->fetchrow_array;

	$password = crypt($password,k9) if ($password);
	$password = $epassword unless ($password);

	# If the new username is the same as the old username, we're
	# just modiying other information
	if ($username eq"$username_orig") {

		$group = "admin" if ($admin);

		&log_error unless ($update_user_info = $dbh->do("update users set password='$password', admin='$admin', email='$email', fullname='$fullname', group='$group' where username='$username'"));
	}

	# If the usernames are not equal, we'll create the new username, 
	# then delete the old one.

	else {
		
		# First we create the new account
		&log_error unless($add_new_account = $dbh->do("insert into users(username,password,admin,email,fullname,group) values('$username','$password','$admin','$email','$fullname','$group')"));
		
		# Then we delete the old account.  Don't worry, &log_error will kill 
		# us before we get here if the account creation fails
		&log_error unless($delete_old_account = $dbh->do("delete from users where username='$username_orig'"));
	}

	print qq(The new values for $username are now in the database.  
	<a href="$path/users">Return to Main Menu</a>);

	&html_footer;
}

##########
##########

sub delete_user_warn {
	$title = "delete user";
	&html_header;
	print <<EOP;
	WARNING - You are about to delete user <i>$username</i>!  Are you sure you want to continue?
	<p><a href="$path/users?syntax=31&username=$username">Yes - Continue</a>
EOP
	&html_footer;
}

##########
##########

sub delete_user {
	$title = "delete user";
	&html_header;

	&log_error unless ($delete_user = $dbh->do("delete from users where username='$username'"));

	print qq(
	Deleted user $username.
	<a href="$path/users">Return to Main Menu</a>
	) if ($delete_user);

	&html_footer;
}

##########
##########

sub get_vars {
	# Get the CGI POST input
	if ($ENV{'REQUEST_METHOD'} eq "POST") {
		read(STDIN,$info,$ENV{"CONTENT_LENGTH"});
	}      
	else { 
		$info=$ENV{QUERY_STRING};
	}      
	foreach (split(/&/,$info)) {
		($var,$val) = split(/=/,$_,2);
		$var =~ s/\+/ /g;
		$val =~ s/\+/ /g;
		$val =~ s/%([0-9,A-F]{2})/sprintf("%c",hex($1))/ge;
		$value{$var} .= ", " if (defined($value{$var}));
		$value{$var} .= $val;
	}

	# Define some variables
	$syntax = $value{'syntax'};
	$option = $value{'option'};
	$search_for = $value{'search_for'};
	$username = $value{'username'};
	$username_orig = $value{'username_orig'};
	$password = $value{'password'};
	$fullname = $value{'fullname'};
	$email = $value{'email'};
}

##########
##########

sub log_error {
   $errstr = $dbh->errstr;
   print <<EOP;
   <html>
   <head><title>eThreads Maintenance - ERROR</title></head>
   <body bgcolor="#FFFFFF">
   <font face="Arial,Helvetica">
   <font size=5><b>eThreads - Error</b></font>
   <p><blockquote>
   <font size=3>
   Sorry, but the eThreads system was unable to complete this request.  Most likely,
   this error was caused by either a database problem, or an attempt to enter illegal
   data.  Please report this error to the system administrator.
   <p>
   Error message: $errstr
   <p><i>eThreads, by Eric Richardson</i>
   </blockquote>
   </font></font>
   </body></html>
EOP
}

##########
##########

sub html_header {
	$formatted_title = join '&nbsp;&nbsp;', split / */, $title;
	print <<EOP;
	<html><head><title>eThreads User Maintenance</title></head>
	<body bgcolor=#FFFFFF>
	<font face="Arial,Helvetica">
	<font size=4>
	<b>eThreads User Maintenance</b>
	<br></font><font size=2>
	$formatted_title
	</font><font size=3>
	<br><blockquote>
EOP
}

sub html_footer {
	print <<EOP;
	</blockquote>
	<p><hr><p>
	<b><i>eThreads - By Eric Richardson</i></b>
	</font></font>
	</body></html>
EOP
}

